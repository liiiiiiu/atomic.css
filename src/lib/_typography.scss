@use '../config';
@use '../utils/util';

/* - Typography 字体排版 -
************************* */

// Font Family
#{util.class-generator(config.$abbr-font-family, sans)}
{
  font-family: ui-sans-serif,
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    "Helvetica Neue",
    Arial,
    "Noto Sans",
    sans-serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol",
    "Noto Color Emoji";
}

#{util.class-generator(config.$abbr-font-family, serif)}
{
  font-family: ui-serif,
    Georgia,
    Cambria,
    "Times New Roman",
    Times,
    serif;
}

#{util.class-generator(config.$abbr-font-family, mono)}
{
  font-family: ui-monospace,
    SFMono-Regular,
    Menlo,
    Monaco,
    Consolas,
    "Liberation Mono",
    "Courier New",
    monospace;
}

// Font Size
@each $key, $value in util.map-handler(config.$map-fontSize) {

  #{util.class-generator(config.$abbr-font-size, $key)}
  {
    font-size: $value;
    line-height: map-get($map: util.map-handler(config.$map-fontSizeLineHeight), $key: $key);
  }

}

// Font Smoothing
#{util.class-generator(config.$abbr-font-smoothing)}
{
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#{util.class-generator(subpixel, config.$abbr-font-smoothing)}
{
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;
}

// // Font Style
#{util.class-generator(config.$abbr-font-style)}
{
  font-style: italic;
}

#{util.class-generator('not', config.$abbr-font-style)}
{
  font-style: normal;
}

// Font Weight
@each $key, $value in util.map-handler(config.$map-fontWeight) {

  #{util.class-generator(config.$abbr-font-weight, $key)}
  {
    font-weight: $value;
  }

}

// Letter Spacing
@each $key, $value in util.map-handler(config.$map-letterSpacing) {

  #{util.class-generator(config.$abbr-letter-spacing, $key)}
  {
    letter-spacing: $value;
  }

}

// Line Height
@each $key, $value in util.map-handler(config.$map-lineHeight) {

  #{util.class-generator(config.$abbr-line-height, $key)}
  {
    line-height: $value;
  }

}

// List Style Type
@each $key, $value in util.map-handler(config.$map-listStyleType) {

  #{util.class-generator(config.$abbr-list-style, $key)}
  {
    list-style-type: $value;
  }

}

// Text Align
@each $value in (
  left,
  center,
  right,
  justify
) {

  #{util.class-generator(config.$abbr-text-align, $value)}
  {
    text-align: $value;
  }

}

// // Text Color
// #{selector-decorator(connector-decorator(($atomic-text-color-name, transparent)))}
// {
//   color: transparent;
// }

// #{selector-decorator(connector-decorator(($atomic-text-color-name, current)))}
// {
//   color: currentColor;
// }

// #{selector-decorator(connector-decorator(($atomic-text-color-name, black)))}
// {
//   #{$atomic-var-text-opacity-name}: 1;
//   color: rgba($color: $atomic-color-black-base, $alpha: var(#{$atomic-var-text-opacity-name}, 1));
// }

// #{selector-decorator(connector-decorator(($atomic-text-color-name, white)))}
// {
//   #{$atomic-var-text-opacity-name}: 1;
//   color: rgba($color: $atomic-color-white-base, $alpha: var(#{$atomic-var-text-opacity-name}, 1));
// }

// @each $color-key, $color-value in util.color-hues-generator() {
//   #{selector-decorator(connector-decorator(($atomic-text-color-name, $color-key)))}
//   {
//     #{$atomic-var-text-opacity-name}: 1;
//     color: rgba($color: $color-value, $alpha: var(#{$atomic-var-text-opacity-name}, 1));
//   }

//   @each $opacity in util.color-brightness-generator() {
//     #{selector-decorator(connector-decorator(($atomic-text-color-name, $color-key, $opacity)))}
//     {
//       #{$atomic-var-text-opacity-name}: 1;
//       color: rgba($color: lighter-color($color-value, $opacity), $alpha: var(#{$atomic-var-text-opacity-name}, 1));
//     }
//   }
// }

// // Text Color Opacity
// @each $key, $value in util.opacities-generator() {
//   #{selector-decorator(connector-decorator(($atomic-text-opacity-name, $key)))}
//   {
//     #{$atomic-var-text-opacity-name}: #{$value};
//   }
// }

// // Text Decoration
// @each $key, $value in (
//   underline: underline,
//   line-through: line-through,
//   no-underline: none
// ) {
//   #{selector-decorator(connector-decorator(($key)))}
//   {
//     text-decoration: $value;
//   }
// }

// // Text Transform
// @each $key, $value in (
//   uppercase: uppercase,
//   lowercase: lowercase,
//   capitalize: capitalize,
//   normal-case: none
// ) {
//   #{selector-decorator(connector-decorator(($key)))}
//   {
//     text-transform: $value;
//   }
// }

// // Text Overflow
// #{selector-decorator(connector-decorator((truncate)))}
// {
//   overflow: hidden;
//   text-overflow: ellipsis;
//   white-space: nowrap;
// }

// #{selector-decorator(connector-decorator(($atomic-text-overflow-name, ellipsis)))}
// {
//   text-overflow: ellipsis;
// }

// #{selector-decorator(connector-decorator(($atomic-text-overflow-name, clip)))}
// {
//   text-overflow: clip;
// }

// // Line clamp
// #{selector-decorator(connector-decorator(($atomic-line-clamp-name, 1)))} {
//   width: 100%;
//   overflow: hidden;
//   text-overflow: ellipsis;
//   white-space: nowrap;
// }

// %clamp-base {
//   word-break: break-all;
//   display: -webkit-box;
//   -webkit-box-orient: vertical;
//   overflow: hidden;
// }

// $line-clamp-index: 2;
// @while $line-clamp-index <= 6 {
//   #{selector-decorator(#{connector-decorator(($atomic-line-clamp-name, $line-clamp-index))})} {
//     @extend %clamp-base;
//     -webkit-line-clamp: $line-clamp-index;
//   }
//   $line-clamp-index: util.big($line-clamp-index);
// }

// // Vertical Align
// @each $value in (
//   baseline,
//   top,
//   middle,
//   bottom,
//   text-top,
//   text-bottom
// ) {
//   #{selector-decorator(connector-decorator(($atomic-vertical-align-name, $value)))}
//   {
//     vertical-align: $value;
//   }
// }

// // White Space
// @each $value in (
//   normal,
//   nowrap,
//   pre,
//   pre-line,
//   pre-wrap
// ) {
//   #{selector-decorator(connector-decorator(($atomic-white-space-name, $value)))}
//   {
//     white-space: $value;
//   }
// }

// // Text Overflow
// #{selector-decorator(connector-decorator((truncate)))}
// {
//   overflow: hidden;
//   text-overflow: ellipsis;
//   white-space: nowrap;
// }

// // Word Break
// #{selector-decorator(connector-decorator(($atomic-word-break-name, normal)))}
// {
//   overflow-wrap: normal;
//   word-break: normal;
// }

// #{selector-decorator(connector-decorator(($atomic-word-break-name, words)))}
// {
//   overflow-wrap: break-word;
// }

// #{selector-decorator(connector-decorator(($atomic-word-break-name, all)))}
// {
//   word-break: break-all;
// }

