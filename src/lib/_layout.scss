@use '../base/var';
@use '../utils/util';

/* - Layout 布局 -
************************* */

// Container

#{util.class-generator(var.$abbr-container)}
{
  width: 100%;
}

@each $key, $value in var.$screens {

  #{util.class-generator(var.$abbr-container, $key)}
  {
    max-width: $value;
  }

}

// Box Decoration Break
#{util.class-generator(var.$abbr-box-decoration-break, slice)}
{
  box-decoration-break: slice;
}

#{util.class-generator(var.$abbr-box-decoration-break, clone)}
{
  box-decoration-break: clone;
}

// Box Sizing
#{util.class-generator(var.$abbr-box-sizing, border)}
{
  box-sizing: border-box;
}

#{util.class-generator(var.$abbr-box-sizing, content)}
{
  box-sizing: content-box;
}

// Display
@each $value in (
  block,
  inline-block,
  inline,
  flex,
  inline-flex,
  table,
  inline-table,
  table-caption,
  table-cell,
  table-column,
  table-column-group,
  table-footer-group,
  table-header-group,
  table-row-group,
  table-row,
  flow-root,
  grid,
  inline-grid,
  contents,
  list-item,
  hidden
) {

  #{util.class-generator($value)}
  {
    display: if($value != hidden, $value, none);
  }

}

// Float
@each $value in (
  left,
  right,
  none
) {

  #{util.class-generator(var.$abbr-float, $value)}
  {
    float: $value;
  }

}

// Clear Float
@each $value in (
  left,
  right,
  none,
  both
) {

  #{util.class-generator(var.$abbr-clear, $value)}
  {
    clear: $value;
  }

}

#{util.class-generator(var.$abbr-clear)}
{
  display: inline-table;
}
#{util.class-generator(var.$abbr-clear)}
{
  *zoom: 1;
}
#{util.class-generator(var.$abbr-clear)}::after
{
  content: " ";
  display: block;
  visibility: hidden;
  height: 0;
  font-size: 0;
  clear: both;
}

// Isolation
#{util.class-generator(isolate)}
{
  isolation: isolate;
}

#{util.class-generator(isolation-auto)
}
{
  isolation: auto;
}

// Object Fit
@each $value in (
  contain,
  cover,
  fill,
  scale-down,
  none
) {

  #{util.class-generator(var.$abbr-object-fit, $value)}
  {
    object-fit: $value;
  }

}

// Object Position
@each $key, $value in var.$objectPositions {

  #{util.class-generator(var.$abbr-object-fit, $key)}
  {
    object-position: $value;
  }

}

// Overflow
@each $values in (
  (auto),
  (hidden),
  (visible),
  (scroll),
  (x, auto),
  (y, auto),
  (x, hidden),
  (y, hidden),
  (x, visible),
  (y, visible),
  (x, scroll),
  (y, scroll)
) {

  #{util.class-generator(var.$abbr-overflow, $values...)}
  {

    @if length($list: $values) < 2 {
      overflow: nth($list: $values, $n: 1);
    }
    @else {
      #{'overflow-'}#{nth($list: $values, $n: 1)}: nth($list: $values, $n: 2);
    }

  }

}

// Overscroll Behavior
@each $values in (
  (auto),
  (contain),
  (none),
  (y, auto),
  (y, contain),
  (y, none),
  (x, auto),
  (x, contain),
  (x, none)
) {

  #{util.class-generator(var.$abbr-overscroll-behavior, $values...)}
  {

    @if length($list: $values) < 2 {
      overscroll-behavior: nth($list: $values, $n: 1);
    }
    @else {
      #{'overscroll-behavior-'}#{nth($list: $values, $n: 1)}: nth($list: $values, $n: 2);
    }

  }

}

// Position
@each $value in (
  static,
  fixed,
  absolute,
  relative,
  sticky
) {

  #{util.class-generator($value)}
  {
    position: $value;
  }

}

// Top Right Bottom Left
@each $outer-key, $outer-value in var.$insets {

  @each $inner-key, $inner-values in (
    (var.$abbr-top, ''): (top),
    (var.$abbr-right, ''): (right),
    (var.$abbr-bottom, ''): (bottom),
    (var.$abbr-left, ''): (left),
    (var.$abbr-inset, ''): (top, right, bottom, left),
    (var.$abbr-inset, x): (right, left),
    (var.$abbr-inset, y): (top, bottom)
  ) {

    @if $outer-key != 'auto' {
      #{util.class-generator(#{'-'}#{
          nth($list: $inner-key, $n: 1)},
          nth($list: $inner-key, $n: 2),
          $outer-key
        )
      }
      {
        @each $inner-value in $inner-values {
          #{$inner-value}: #{'-' + $outer-value};
        }
      }
    }

    #{util.class-generator(
        nth($list: $inner-key, $n: 1),
        nth($list: $inner-key, $n: 2),
        $outer-key
      )
    }
    {
      @each $inner-value in $inner-values {
        #{$inner-value}: $outer-value;
      }
    }

  }

}

// Visible
#{util.class-generator(var.$abbr-visible)}
{
  visibility: visible;
}

#{util.class-generator(#{'in'}#{var.$abbr-visible})}
{
  visibility: hidden;
}

// Z-Index
@each $key, $value in var.$zIndexes {

  #{util.class-generator(var.$abbr-z-index, $key)}
  {
    z-index: $value;
  }

}

// Flex Direction
@each $key, $value in (
  (row, ''): row,
  (row, reverse): row-reverse,
  (col, ''): column,
  (col, reverse): column-reverse
) {

  #{util.class-generator(
      var.$abbr-flex,
      nth($list: $key, $n: 1),
      nth($list: $key, $n: 2)
    )
  }
  {
    flex-direction: $value;
  }

}

// Flex Wrap
@each $key, $value in (
  (wrap, ''): wrap,
  (wrap, reverse): wrap-reverse,
  (nowrap, ''): nowrap
) {

  #{util.class-generator(
      var.$abbr-flex,
      nth($list: $key, $n: 1),
      nth($list: $key, $n: 2)
    )
  }
  {
    flex-wrap: $value;
  }

}

// Flex
@each $key, $value in var.$flexes {

  #{util.class-generator(var.$abbr-flex, $key)}
  {
    flex: $value;
  }

}

// Flex Grow
@each $key, $value in var.$flexGrows {

  #{util.class-generator(var.$abbr-flex, grow, $key)}
  {
    flex-grow: $value;
  }

}

// Flex Shrink
@each $key, $value in var.$flexShrinks {

  #{util.class-generator(var.$abbr-flex, shrink, $key)}
  {
    flex-shrink: $value;
  }

}

// Order
@each $key, $value in var.$orders {

  #{util.class-generator(var.$abbr-order, $key)}
  {
    order: $value;
  }

}

// Grid Template Columns
@each $key, $value in var.$gridTemplateColumns {

  #{util.class-generator(var.$abbr-grid, cols, $key)}
  {
    grid-template-columns: $value;
  }

}


// Grid Column Start / End
@each $key, $value in var.$gridColumn {

  #{util.class-generator(var.$abbr-grid-column, $key)}
  {
    grid-column: $value;
  }

}

@each $key, $value in var.$gridColumnStart {

  #{util.class-generator(var.$abbr-grid-column, start, $key)}
  {
    grid-column-start: $value;
  }

}

@each $key, $value in var.$gridColumnEnd {

  #{util.class-generator(var.$abbr-grid-column, end, $key)}
  {
    grid-column-end: $value;
  }

}

// Grid Template Rows
@each $key, $value in var.$gridTemplateRows {

  #{util.class-generator(var.$abbr-grid, rows, $key)}
  {
    grid-template-rows: $value;
  }

}

// Grid Row Start / End
@each $key, $value in var.$gridRow {

  #{util.class-generator(var.$abbr-grid-row, $key)}
  {
    grid-row: $value;
  }

}

@each $key, $value in var.$gridRowStart {

  #{util.class-generator(var.$abbr-grid-row, start, $key)}
  {
    grid-row-start: $value;
  }

}

@each $key, $value in var.$gridRowEnd {

  #{util.class-generator(var.$abbr-grid-row, end, $key)}
  {
    grid-row-end: $value;
  }

}

// Grid Auto Flow
@each $key, $value in (
  (row, ''): row,
  (col, ''): column,
  (row, dense): row dense,
  (col, dense): column dense
) {

  #{util.class-generator(
      var.$abbr-grid,
      flow,
      nth($list: $key, $n: 1),
      nth($list: $key, $n: 2),
    )
  }
  {
    grid-auto-flow: $value;
  }

}

// Grid Auto Columns
@each $key, $value in var.$gridAutoColumns {

  #{util.class-generator(var.$abbr-grid-auto, cols, $key)}
  {
    grid-auto-columns: $value;
  }

}

// Grid Auto Rows
@each $key, $value in var.$gridAutoRows {

  #{util.class-generator(var.$abbr-grid-auto, rows, $key)}
  {
    grid-auto-rows: $value;
  }

}

// Gap
@each $outer-key, $outer-value in var.$gaps {

  @each $inner-key, $inner-value in (
    '': '',
    x: 'column-',
    y: 'row-'
  ) {

    @if $inner-key == '' {
      #{util.class-generator(var.$abbr-gap, $outer-key)}
      {
        #{$inner-value}#{'gap'}: $outer-value;
      }
    }
    @else {
      #{util.class-generator(var.$abbr-gap, $inner-key, $outer-key)}
      {
        #{$inner-value}#{'gap'}: $outer-value;
      }
    }

  }

}

// Justify Content
@each $key, $value in (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly
) {

  #{util.class-generator(var.$abbr-justify-content, $key)}
  {
    justify-content: $value;
  }

}

// Justify Items
@each $key, $value in (
  start: start,
  end: end,
  center: center,
  stretch: stretch
) {

  #{util.class-generator(var.$abbr-justify-items, $key)}
  {
    justify-items: $value;
  }

}

// Justify Self
@each $key, $value in (
  auto: auto,
  start: start,
  end: end,
  center: center,
  stretch: stretch
) {

  #{util.class-generator(var.$abbr-justify-self, $key)}
  {
    justify-self: $value;
  }

}

// Align Content
@each $key, $value in (
  start: flex-start,
  end: flex-end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly
) {

  #{util.class-generator(var.$abbr-align-content, $key)}
  {
    align-content: $value;
  }

}

// Align Items
@each $key, $value in (
  start: flex-start,
  end: flex-end,
  center: center,
  baseline: baseline,
  stretch: stretch
) {

  #{util.class-generator(var.$abbr-align-items, $key)}
  {
    align-items: $value;
  }

}

// Align Self
@each $key, $value in (
  start: flex-start,
  end: flex-end,
  center: center,
  baseline: baseline,
  stretch: stretch,
  auto: auto
) {

  #{util.class-generator(var.$abbr-align-self, $key)}
  {
    align-self: $value;
  }

}

// Place Content
@each $key, $value in (
  start: start,
  end: end,
  center: center,
  between: space-between,
  around: space-around,
  evenly: space-evenly,
  stretch: stretch
) {

  #{util.class-generator(var.$abbr-place-content, $key)}
  {
    place-content: $value;
  }

}

// Place Items
@each $key, $value in (
  start: start,
  end: end,
  center: center,
  stretch: stretch
) {

  #{util.class-generator(var.$abbr-place-items, $key)}
  {
    place-items: $value;
  }

}

// Place Self
@each $key, $value in (
  start: start,
  end: end,
  center: center,
  stretch: stretch,
  auto: auto
) {

  #{util.class-generator(var.$abbr-place-self, $key)}
  {
    place-self: $value;
  }

}