@use '../utils/util';

/* - Box 盒模型 -
************************* */

// Padding
@each $number-key, $number-value in util.spacing-generator() {
  @each $side-key, $side-value in (
    '': (padding),
    't': (padding-top),
    'r': (padding-right),
    'b': (padding-bottom),
    'l': (padding-left),
    'x': (padding-right, padding-left),
    'y': (padding-top, padding-bottom)) {
    @if $number-key == 'auto' {}
    @else if $number-key == 'full' {}
    @else {
      @if $side-key == '' {
        #{selector-decorator(connector-decorator(($atomic-padding-name, str-insert-backslash($number-key))))}
        {
          @each $side-val in $side-value {
            #{$side-val}: $number-value;
          }
        }
      }
      @else {
        #{selector-decorator(connector-decorator((#{$atomic-padding-name + $side-key}, str-insert-backslash($number-key))))}
        {
          @each $side-val in $side-value {
            #{$side-val}: $number-value;
          }
        }
      }
    }
  }
}

// Margin
@each $number-key, $number-value in util.spacing-generator() {
  @each $side-key, $side-value in (
    '': (margin),
    't': (margin-top),
    'r': (margin-right),
    'b': (margin-bottom),
    'l': (margin-left),
    'x': (margin-right, margin-left),
    'y': (margin-top, margin-bottom)) {
    @if $number-key == 'full' {}
    @else {
      @if $side-key == '' {
        @if $number-key != 'auto' {
          #{selector-decorator(connector-decorator((#{'-' + $atomic-margin-name}, str-insert-backslash($number-key))))}
          {
            @each $side-val in $side-value {
              #{$side-val}: #{'-' + $number-value};
            }
          }
        }
        #{selector-decorator(connector-decorator(($atomic-margin-name, str-insert-backslash($number-key))))}
        {
          @each $side-val in $side-value {
            #{$side-val}: $number-value;
          }
        }
      }
      @else {
        @if $number-key != 'auto' {
          #{selector-decorator(connector-decorator((#{'-' + $atomic-margin-name + $side-key}, str-insert-backslash($number-key))))}
          {
            @each $side-val in $side-value {
              #{$side-val}: #{'-' + $number-value};
            }
          }
        }
        #{selector-decorator(connector-decorator((#{$atomic-margin-name + $side-key}, str-insert-backslash($number-key))))}
        {
          @each $side-val in $side-value {
            #{$side-val}: $number-value;
          }
        }
      }
    }
  }
}

// Width
@each $number-key, $number-value in util.spacing-generator() {
  #{selector-decorator(connector-decorator(($atomic-width-name, str-insert-backslash($number-key))))}
  {
    width: $number-value;
  }
}

#{selector-decorator(connector-decorator(($atomic-width-name, screen)))}
{
  width: 100vw;
}

#{selector-decorator(connector-decorator(($atomic-width-name, min)))} {
  width: min-content;
}

#{selector-decorator(connector-decorator(($atomic-width-name, max)))} {
  width: max-content;
}

@each $number-key in ((1, 2), (1, 3), (2, 3), (1, 4), (2, 3), (3, 4), (1, 5), (2, 5), (3, 5), (4, 5), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6), (1, 12), (2, 12), (3, 12), (4, 12), (5, 12), (6, 12), (7, 12), (8, 12), (9, 12), (10, 12), (11, 12)) {
  #{selector-decorator(connector-decorator(($atomic-width-name, #{nth($number-key, 1) + '\\/' + nth($number-key, 2)})))}
  {
    width: percentage(calc(nth($number-key, 1) / nth($number-key, 2)));
  }
}

// Min Width
@each $key, $value in (
  0: 0px,
  full: 100%,
  min: min-content,
  max: max-content
) {
  #{selector-decorator(connector-decorator((min, $atomic-width-name, $key)))}
  {
    min-width: $value;
  }
}

// Max Width
@each $key, $value in (
  0: join-rem(0),
  none: none,
  xs: join-rem(20),
  sm: join-rem(24),
  md: join-rem(28),
  lg: join-rem(32),
  xl: join-rem(36),
  2xl: join-rem(42),
  3xl: join-rem(48),
  4xl: join-rem(56),
  5xl: join-rem(64),
  6xl: join-rem(72),
  7xl: join-rem(80),
  full: 100%,
  min: min-content,
  max: max-content,
  prose: 65ch,
  screen-sm: $atomic-screen-sm-min,
  screen-md: $atomic-screen-md-min,
  screen-lg: $atomic-screen-lg-min,
  screen-xl: $atomic-screen-xl-min,
  screen-2xl: $atomic-screen-2xl-min
) {
  #{selector-decorator(connector-decorator((max, $atomic-width-name, $key)))}
  {
    max-width: $value;
  }
}

// Height
@each $number-key, $number-value in util.spacing-generator() {
  #{selector-decorator(connector-decorator(($atomic-height-name, str-insert-backslash($number-key))))}
  {
    height: $number-value;
  }
}

#{selector-decorator(connector-decorator(($atomic-height-name, screen)))}
{
  height: 100vh;
}

@each $number-key in ((1, 2), (1, 3), (2, 3), (1, 4), (2, 3), (3, 4), (1, 5), (2, 5), (3, 5), (4, 5), (1, 6), (2, 6), (3, 6), (4, 6), (5, 6)) {
  #{selector-decorator(connector-decorator(($atomic-height-name, #{nth($number-key, 1) + '\\/' + nth($number-key, 2)})))}
  {
    height: percentage(calc(nth($number-key, 1) / nth($number-key, 2)));
  }
}

// Min Height
@each $key, $value in (
  0: 0px,
  full: 100%,
  screen: 100vh,
) {
  #{selector-decorator(connector-decorator((min, $atomic-height-name, $key)))}
  {
    min-height: $value;
  }
}

// Max Height
@each $number-key, $number-value in util.spacing-generator() {
  @if $number-key != 'auto' {
    #{selector-decorator(connector-decorator((max, $atomic-height-name, str-insert-backslash($number-key))))}
    {
      max-height: $number-value;
    }
  }
}

#{selector-decorator(connector-decorator((max, $atomic-height-name, screen)))}
{
  max-height: 100vh;
}