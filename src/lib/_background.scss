@use '../utils/util';

/* - Background 背景 -
************************* */

@mixin background($key, $value) {
  $prop: background-attachment;

  @if $key == 'attachment' {
    $prop: background-attachment;
  }
  @else if $key == 'clip' {
    $prop: background-clip;
  }
  @else if $key == 'color' {
    $prop: background-color;
  }
  @else if $key == 'origin' {
    $prop: background-origin;
  }
  @else if $key == 'position' {
    $prop: background-position;
  }
  @else if $key == 'repeat' {
    $prop: background-repeat;
  }
  @else if $key == 'size' {
    $prop: background-size;
  }
  @else if $key == 'image' {
    $prop: background-image;
  }

  #{$prop}: $value;
}

// Background Attachment
@each $value in (
  fixed,
  local,
  scroll
) {
  #{selector-decorator(connector-decorator(($atomic-background-attachment-name, $value)))}
  {
    @include background(attachment, $value);
  }
}

// Background Clip
@each $key, $value in (
  border: border-box,
  padding: padding-box,
  content: content-box,
  text: text
) {
  #{selector-decorator(connector-decorator(($atomic-background-clip-name, $key)))}
  {
    @include background(clip, $value);
  }
}

// Background Color

#{selector-decorator(connector-decorator(($atomic-background-color-name, transparent)))}
{
  @include background(color, transparent);
}

#{selector-decorator(connector-decorator(($atomic-background-color-name, current)))}
{
  @include background(color, currentColor);
}

#{selector-decorator(connector-decorator(($atomic-background-color-name, black)))}
{
  #{$atomic-var-background-opacity-name}: 1;
  @include background(color, rgba($color: $atomic-color-black-base, $alpha: var(#{$atomic-var-background-opacity-name}, 1)));
}

#{selector-decorator(connector-decorator(($atomic-background-color-name, white)))}
{
  #{$atomic-var-background-opacity-name}: 1;
  @include background(color, rgba($color: $atomic-color-white-base, $alpha: var(#{$atomic-var-background-opacity-name}, 1)));
}

@each $color-key, $color-value in util.color-hues-generator() {
  #{selector-decorator(connector-decorator(($atomic-background-color-name, $color-key)))}
  {
    #{$atomic-var-background-opacity-name}: 1;
    @include background(color, rgba($color: $color-value, $alpha: var(#{$atomic-var-background-opacity-name}, 1)));
  }

  @each $opacity in util.color-brightness-generator() {
    #{selector-decorator(connector-decorator(($atomic-background-color-name, $color-key, $opacity)))}
    {
      #{$atomic-var-background-opacity-name}: 1;
      @include background(color, rgba($color: mix-color-with-opacity($color-value, $opacity), $alpha: var(#{$atomic-var-background-opacity-name}, 1)));
    }
  }
}

// Background Color Opacity
@each $key, $value in util.opacities-generator() {
  #{selector-decorator(connector-decorator(($atomic-background-opacity-name, $key)))}
  {
    #{$atomic-var-background-opacity-name}: #{$value};
  }
}

// Background Origin
#{selector-decorator(connector-decorator(($atomic-background-origin-name, border)))}
{
  @include background(origin, border-box);
}

#{selector-decorator(connector-decorator(($atomic-background-origin-name, padding)))}
{
  @include background(origin, padding-box);
}

#{selector-decorator(connector-decorator(($atomic-background-origin-name, content)))}
{
  @include background(origin, content-box);
}

// Background Position
@each $key, $value in (
  bottom: bottom,
  center: center,
  left: left,
  left-bottom: left bottom,
  left-top: left top,
  right: right,
  right-bottom: right bottom,
  right-top: right top,
  top: top
) {
  #{selector-decorator(connector-decorator(($atomic-background-position-name, $key)))}
  {
    @include background(position, $value);
  }
}

// Background Repeat
@each $key, $value in (
  repeat: repeat,
  no-repeat: no-repeat,
  repeat-x: repeat-x,
  repeat-y: repeat-y,
  repeat-round: round,
  repeat-space: space
) {
  #{selector-decorator(connector-decorator(($atomic-background-position-name, $key)))}
  {
    @include background(repeat, $value);
  }
}

// Background Size
@each $value in (
  auto,
  cover,
  contain
) {
  #{selector-decorator(connector-decorator(($atomic-background-size-name, $value)))}
  {
    @include background(size, $value);
  }
}

// Background Image
#{selector-decorator(connector-decorator(($atomic-background-image-name, none)))}
{
  @include background(image, none);
}

@each $key, $value in (
  t: top,
  tr: top right,
  r: right,
  br: bottom right,
  b: bottom,
  bl: bottom left,
  l: left,
  tl: top left
) {
  #{selector-decorator(connector-decorator(($atomic-background-image-name, gradient, to, $key)))}
  {
    @include background(image, linear-gradient(to #{$value}, var($atomic-var-gradient-stops-name)));
  }
}

// Background Image Gradient Stops From
#{selector-decorator(connector-decorator(($atomic-background-image-gradient-from-name, transparent)))}
{
  #{$atomic-var-gradient-from-name}: transparent;
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    var($atomic-var-gradient-to-name, rgba(0, 0, 0, 0));
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-from-name, current)))}
{
  #{$atomic-var-gradient-from-name}: currentColor;
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    var($atomic-var-gradient-to-name, rgba(255, 255, 255, 0));
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-from-name, black)))}
{
  #{$atomic-var-gradient-from-name}: $atomic-color-black-base;
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    var($atomic-var-gradient-to-name, rgba($color: $atomic-color-black-base, $alpha: 0));
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-from-name, white)))}
{
  #{$atomic-var-gradient-from-name}: $atomic-color-white-base;
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    var($atomic-var-gradient-to-name, rgba($color: $atomic-color-white-base, $alpha: 0));
}

@each $color-key, $color-value in util.color-hues-generator() {
  #{selector-decorator(connector-decorator(($atomic-background-image-gradient-from-name, $color-key)))}
  {
    #{$atomic-var-gradient-from-name}: $color-value;
    #{$atomic-var-gradient-stops-name}:
      var($atomic-var-gradient-from-name),
      var($atomic-var-gradient-to-name, rgba($color: $color-value, $alpha: 0));
  }

  @each $opacity in util.color-brightness-generator() {
    #{selector-decorator(connector-decorator(($atomic-background-image-gradient-from-name, $color-key, $opacity)))}
    {
      #{$atomic-var-gradient-from-name}:
        rgba($color: mix-color-with-opacity($color-value, $opacity), $alpha: 1);
      #{$atomic-var-gradient-stops-name}:
        var($atomic-var-gradient-from-name),
        var($atomic-var-gradient-to-name, rgba($color: mix-color-with-opacity($color-value, $opacity), $alpha: 0));
    }
  }
}

// Background Image Gradient Stops Via
#{selector-decorator(connector-decorator(($atomic-background-image-gradient-via-name, transparent)))}
{
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    transparent,
    var($atomic-var-gradient-to-name, rgba(0, 0, 0, 0));
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-via-name, current)))}
{
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    currentColor,
    var($atomic-var-gradient-to-name, rgba(255, 255, 255, 0));
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-via-name, black)))}
{
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    $atomic-color-black-base,
    var($atomic-var-gradient-to-name, rgba($color: $atomic-color-black-base, $alpha: 0));
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-via-name, white)))}
{
  #{$atomic-var-gradient-stops-name}:
    var($atomic-var-gradient-from-name),
    $atomic-color-white-base,
    var($atomic-var-gradient-to-name, rgba($color: $atomic-color-white-base, $alpha: 0));
}

@each $color-key, $color-value in util.color-hues-generator() {
  #{selector-decorator(connector-decorator(($atomic-background-image-gradient-via-name, $color-key)))}
  {
    #{$atomic-var-gradient-stops-name}: var($atomic-var-gradient-from-name),
    $color-value,
    var($atomic-var-gradient-to-name, rgba($color: $color-value, $alpha: 0));
  }

  @each $opacity in util.color-brightness-generator() {
    #{selector-decorator(connector-decorator(($atomic-background-image-gradient-via-name, $color-key, $opacity)))}
    {
      #{$atomic-var-gradient-stops-name}: var($atomic-var-gradient-from-name),
      rgba($color: mix-color-with-opacity($color-value, $opacity), $alpha: 1),
      var($atomic-var-gradient-to-name, rgba($color: mix-color-with-opacity($color-value, $opacity), $alpha: 0));
    }
  }
}

// Background Image Gradient Stops To
#{selector-decorator(connector-decorator(($atomic-background-image-gradient-to-name, transparent)))}
{
  #{$atomic-var-gradient-to-name}: transparent;
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-to-name, current)))}
{
  #{$atomic-var-gradient-to-name}: currentColor;
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-to-name, black)))}
{
  #{$atomic-var-gradient-to-name}: $atomic-color-black-base;
}

#{selector-decorator(connector-decorator(($atomic-background-image-gradient-to-name, white)))}
{
  #{$atomic-var-gradient-to-name}: $atomic-color-white-base;
}

@each $color-key, $color-value in util.color-hues-generator() {
  #{selector-decorator(connector-decorator(($atomic-background-image-gradient-to-name, $color-key)))}
  {
    #{$atomic-var-gradient-to-name}: $color-value;
  }

  @each $opacity in util.color-brightness-generator() {
    #{selector-decorator(connector-decorator(($atomic-background-image-gradient-to-name, $color-key, $opacity)))}
    {
      #{$atomic-var-gradient-to-name}: rgba($color: mix-color-with-opacity($color-value, $opacity), $alpha: 1);
    }
  }
}